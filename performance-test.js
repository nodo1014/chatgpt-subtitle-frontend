#!/usr/bin/env node\n\n/**\n * 성능 테스트 및 실패율 분석 스크립트\n * \n * 사용법:\n * node performance-test.js\n * node performance-test.js --clips (클립 생성 포함)\n * node performance-test.js --analysis (기존 클립 분석)\n */\n\nconst fetch = require('node-fetch');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// 설정\nconst CONFIG = {\n  BASE_URL: 'http://localhost:3000',\n  CLIPS_DIR: './public/clips',\n  RESULTS_DIR: './test-results'\n};\n\n// 성능 테스트용 검색어 (다양한 결과 수 예상)\nconst PERFORMANCE_QUERIES = [\n  { query: \"hello\", expectedResults: \"많음\", difficulty: \"쉬움\" },\n  { query: \"thank you\", expectedResults: \"보통\", difficulty: \"보통\" },\n  { query: \"i'm sorry\", expectedResults: \"보통\", difficulty: \"보통\" },\n  { query: \"what did you\", expectedResults: \"적음\", difficulty: \"어려움\" },\n  { query: \"how are you\", expectedResults: \"적음\", difficulty: \"어려움\" }\n];\n\n// 포트 자동 감지\nasync function detectPort() {\n  const ports = [3000, 3006, 3008, 3010];\n  \n  for (const port of ports) {\n    try {\n      const response = await fetch(`http://localhost:${port}`, { timeout: 2000 });\n      if (response.ok) {\n        console.log(`🔍 개발 서버 감지: http://localhost:${port}`);\n        return port;\n      }\n    } catch (error) {\n      continue;\n    }\n  }\n  \n  throw new Error('개발 서버를 찾을 수 없습니다. npm run dev를 먼저 실행하세요.');\n}\n\n// 검색 테스트\nasync function testSearch(query, port) {\n  const startTime = Date.now();\n  \n  try {\n    const response = await fetch(`http://localhost:${port}/api/batch-search`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        text: query,\n        results_per_sentence: 5\n      }),\n      timeout: 10000\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const searchTime = Date.now() - startTime;\n    \n    return {\n      success: true,\n      query,\n      resultCount: data.search_summary?.total_results || 0,\n      searchTime,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      query,\n      error: error.message,\n      searchTime: Date.now() - startTime\n    };\n  }\n}\n\n// 클립 생성 테스트\nasync function testClipCreation(searchData, port) {\n  const startTime = Date.now();\n  \n  try {\n    const response = await fetch(`http://localhost:${port}/api/auto-clips`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        sentence_results: searchData.sentence_results || []\n      }),\n      timeout: 300000 // 5분 타임아웃\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const result = await response.json();\n    const clipTime = Date.now() - startTime;\n    \n    return {\n      success: true,\n      clipTime,\n      totalCreated: result.total_created || 0,\n      totalProcessed: result.total_processed || 0,\n      stats: result.stats\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      clipTime: Date.now() - startTime\n    };\n  }\n}\n\n// 기존 클립 분석\nasync function analyzeExistingClips() {\n  try {\n    const clipsDir = CONFIG.CLIPS_DIR;\n    const files = await fs.readdir(clipsDir);\n    \n    const jsonFiles = files.filter(f => f.endsWith('.json'));\n    const mp4Files = files.filter(f => f.endsWith('.mp4'));\n    const jpgFiles = files.filter(f => f.endsWith('.jpg'));\n    \n    console.log('📊 기존 클립 분석 결과:');\n    console.log(`   📄 JSON 파일: ${jsonFiles.length}개`);\n    console.log(`   🎬 MP4 파일: ${mp4Files.length}개`);\n    console.log(`   🖼️ JPG 파일: ${jpgFiles.length}개`);\n    \n    // 상태별 분석\n    const statusCount = {\n      'stage-1-json': 0,\n      'stage-2-thumbnail': 0,\n      'stage-3-complete': 0,\n      'stage-3-failed': 0,\n      'unknown': 0\n    };\n    \n    for (const jsonFile of jsonFiles) {\n      try {\n        const content = await fs.readFile(path.join(clipsDir, jsonFile), 'utf-8');\n        const metadata = JSON.parse(content);\n        \n        if (metadata.tags) {\n          if (metadata.tags.includes('stage-3-complete')) {\n            statusCount['stage-3-complete']++;\n          } else if (metadata.tags.includes('stage-3-failed')) {\n            statusCount['stage-3-failed']++;\n          } else if (metadata.tags.includes('stage-2-thumbnail')) {\n            statusCount['stage-2-thumbnail']++;\n          } else if (metadata.tags.includes('stage-1-json')) {\n            statusCount['stage-1-json']++;\n          } else {\n            statusCount['unknown']++;\n          }\n        } else {\n          statusCount['unknown']++;\n        }\n      } catch (error) {\n        statusCount['unknown']++;\n      }\n    }\n    \n    console.log('\\n🏷️ 상태별 분석:');\n    console.log(`   🔄 JSON만 생성: ${statusCount['stage-1-json']}개`);\n    console.log(`   📸 썸네일까지: ${statusCount['stage-2-thumbnail']}개`);\n    console.log(`   ✅ 완전 완료: ${statusCount['stage-3-complete']}개`);\n    console.log(`   ❌ 생성 실패: ${statusCount['stage-3-failed']}개`);\n    console.log(`   ❓ 상태 불명: ${statusCount['unknown']}개`);\n    \n    const totalProcessed = Object.values(statusCount).reduce((a, b) => a + b, 0);\n    const successRate = totalProcessed > 0 ? (statusCount['stage-3-complete'] / totalProcessed * 100).toFixed(1) : 0;\n    \n    console.log(`\\n📈 성공률: ${successRate}% (${statusCount['stage-3-complete']}/${totalProcessed})`);\n    \n    return {\n      totalFiles: {\n        json: jsonFiles.length,\n        mp4: mp4Files.length,\n        jpg: jpgFiles.length\n      },\n      statusCount,\n      successRate: parseFloat(successRate)\n    };\n  } catch (error) {\n    console.error('❌ 클립 분석 실패:', error.message);\n    return null;\n  }\n}\n\n// 메인 테스트 실행\nasync function runPerformanceTest() {\n  console.log('🚀 성능 테스트 시작');\n  console.log('=' .repeat(60));\n  \n  try {\n    // 포트 감지\n    const port = await detectPort();\n    CONFIG.BASE_URL = `http://localhost:${port}`;\n    \n    // 기존 클립 분석\n    console.log('\\n📊 기존 클립 상태 분석...');\n    const analysis = await analyzeExistingClips();\n    \n    // 검색 테스트\n    console.log('\\n🔍 검색 성능 테스트...');\n    const searchResults = [];\n    \n    for (let i = 0; i < PERFORMANCE_QUERIES.length; i++) {\n      const testCase = PERFORMANCE_QUERIES[i];\n      console.log(`\\n[${i + 1}/${PERFORMANCE_QUERIES.length}] \"${testCase.query}\" (${testCase.difficulty})`);\n      \n      const result = await testSearch(testCase.query, port);\n      searchResults.push({ ...result, ...testCase });\n      \n      if (result.success) {\n        console.log(`   ✅ ${result.resultCount}개 결과 (${result.searchTime}ms)`);\n      } else {\n        console.log(`   ❌ 실패: ${result.error}`);\n      }\n    }\n    \n    // 클립 생성 테스트 (옵션)\n    const includeClips = process.argv.includes('--clips');\n    let clipResults = [];\n    \n    if (includeClips) {\n      console.log('\\n🎬 클립 생성 테스트...');\n      \n      for (const searchResult of searchResults) {\n        if (searchResult.success && searchResult.resultCount > 0) {\n          console.log(`\\n클립 생성: \"${searchResult.query}\"`);\n          const clipResult = await testClipCreation(searchResult.data, port);\n          clipResults.push({ query: searchResult.query, ...clipResult });\n          \n          if (clipResult.success) {\n            console.log(`   ✅ ${clipResult.totalCreated}개 생성 (${(clipResult.clipTime/1000).toFixed(1)}초)`);\n          } else {\n            console.log(`   ❌ 실패: ${clipResult.error}`);\n          }\n        }\n      }\n    }\n    \n    // 결과 요약\n    console.log('\\n' + '=' .repeat(60));\n    console.log('📊 테스트 결과 요약');\n    console.log('=' .repeat(60));\n    \n    // 검색 성능\n    const successfulSearches = searchResults.filter(r => r.success);\n    const avgSearchTime = successfulSearches.length > 0 \n      ? successfulSearches.reduce((sum, r) => sum + r.searchTime, 0) / successfulSearches.length \n      : 0;\n    const totalResults = successfulSearches.reduce((sum, r) => sum + r.resultCount, 0);\n    \n    console.log(`🔍 검색 테스트:`);\n    console.log(`   성공: ${successfulSearches.length}/${searchResults.length}`);\n    console.log(`   평균 시간: ${avgSearchTime.toFixed(0)}ms`);\n    console.log(`   총 결과: ${totalResults}개`);\n    \n    // 클립 생성 성능\n    if (clipResults.length > 0) {\n      const successfulClips = clipResults.filter(r => r.success);\n      const avgClipTime = successfulClips.length > 0\n        ? successfulClips.reduce((sum, r) => sum + r.clipTime, 0) / successfulClips.length\n        : 0;\n      const totalCreated = successfulClips.reduce((sum, r) => sum + r.totalCreated, 0);\n      \n      console.log(`\\n🎬 클립 생성:`);\n      console.log(`   성공: ${successfulClips.length}/${clipResults.length}`);\n      console.log(`   평균 시간: ${(avgClipTime/1000).toFixed(1)}초`);\n      console.log(`   총 생성: ${totalCreated}개`);\n    }\n    \n    // 전체 시스템 상태\n    if (analysis) {\n      console.log(`\\n📈 시스템 상태:`);\n      console.log(`   전체 성공률: ${analysis.successRate}%`);\n      console.log(`   완료된 클립: ${analysis.statusCount['stage-3-complete']}개`);\n      console.log(`   실패한 클립: ${analysis.statusCount['stage-3-failed']}개`);\n    }\n    \n    // 결과 저장\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const reportPath = path.join(CONFIG.RESULTS_DIR, `performance-${timestamp}.json`);\n    \n    await fs.mkdir(CONFIG.RESULTS_DIR, { recursive: true });\n    await fs.writeFile(reportPath, JSON.stringify({\n      timestamp: new Date().toISOString(),\n      searchResults,\n      clipResults,\n      analysis,\n      summary: {\n        searchSuccess: successfulSearches.length,\n        searchTotal: searchResults.length,\n        avgSearchTime,\n        totalResults,\n        clipSuccess: clipResults.filter(r => r.success).length,\n        clipTotal: clipResults.length,\n        avgClipTime: clipResults.length > 0 ? avgClipTime : 0\n      }\n    }, null, 2));\n    \n    console.log(`\\n💾 결과 저장: ${reportPath}`);\n    \n  } catch (error) {\n    console.error('❌ 테스트 실패:', error.message);\n    process.exit(1);\n  }\n}\n\n// 실행\nif (process.argv.includes('--analysis')) {\n  analyzeExistingClips().then(() => process.exit(0));\n} else {\n  runPerformanceTest().then(() => process.exit(0));\n}" 