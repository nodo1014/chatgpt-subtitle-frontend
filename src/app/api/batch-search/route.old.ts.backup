import { NextRequest, NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';
import Database from 'better-sqlite3';

interface SubtitleData {
  media_file: string;
  text: string;
  start_time: string;
  end_time: string;
  language: string;
  directory: string;
}

interface SearchResult {
  media_file: string;
  subtitle_text: string;
  start_time: string;
  end_time: string;
  language: string;
  directory: string;
  confidence: number;
}

interface SentenceResult {
  sentence_index: number;
  search_sentence: string;
  found_count: number;
  results: SearchResult[];
}

// DB 연결 캐시
let db: Database.Database | null = null;

function getDatabase(): Database.Database {
  if (!db) {
    const dbPath = path.join(process.cwd(), 'public', 'working_subtitles.db');
    db = new Database(dbPath, { readonly: true });
    console.log('📊 DB 연결됨:', dbPath);
  }
  return db;
}

export async function POST(request: NextRequest) {
  console.log('🔍 BATCH-SEARCH API 호출됨!');
  try {
    const { text, results_per_sentence = 20 } = await request.json();
    console.log('📥 받은 검색 텍스트:', text);
    console.log('📥 문장당 결과 수:', results_per_sentence);

    if (!text || typeof text !== 'string') {
      return NextResponse.json({
        success: false,
        error: '검색할 텍스트를 입력해주세요.'
      }, { status: 400 });
    }

    // 영어 문장 추출
    const extractedSentences = extractEnglishSentences(text);
    
    if (extractedSentences.length === 0) {
      return NextResponse.json({
        success: false,
        error: '영어 문장을 찾을 수 없습니다. 각 줄에 하나씩 영어 문장을 입력해주세요.'
      }, { status: 400 });
    }

    const sentenceResults: SentenceResult[] = [];
    let totalResults = 0;

    // 각 문장에 대해 DB에서 검색 수행
    for (let i = 0; i < extractedSentences.length; i++) {
      const sentence = extractedSentences[i];
      const searchResults = searchInDatabase(sentence, results_per_sentence);
      
      sentenceResults.push({
        sentence_index: i + 1,
        search_sentence: sentence,
        found_count: searchResults.length,
        results: searchResults
      });
      
      totalResults += searchResults.length;
    }

    // 응답 데이터 구성
    const responseData = {
      success: true,
      extracted_sentences: extractedSentences,
      search_summary: {
        total_sentences: extractedSentences.length,
        total_results: totalResults,
        average_per_sentence: (totalResults / extractedSentences.length).toFixed(1),
        search_time: 1.2 // 실제로는 측정된 시간
      },
      sentence_results: sentenceResults,
      auto_create_clips: true
    };

    return NextResponse.json(responseData);

  } catch (error) {
    console.error('배치 검색 오류:', error);
    return NextResponse.json({
      success: false,
      error: '검색 중 오류가 발생했습니다.'
    }, { status: 500 });
  }
}

function extractEnglishSentences(text: string): string[] {
  // 한글, 한자, 일본어 문자 제거 (유니코드 범위)
  const koreanRegex = /[\u1100-\u11FF\u3130-\u318F\uAC00-\uD7AF\u4E00-\u9FFF\u3040-\u309F\u30A0-\u30FF]/g;
  
  // 줄바꿈으로 문장 분리
  const lines = text.split('\n').map(line => line.trim()).filter(line => {
    // 빈 줄 제거
    if (line.length === 0) return false;
    
    // 한글/중국어/일본어 문자가 포함된 줄 제거
    if (koreanRegex.test(line)) return false;
    
    // 최소 길이 체크 (3글자 이상)
    if (line.length < 3) return false;
    
    // 최소 단어 수 체크 (1개 이상의 단어)
    if (line.split(/\s+/).length < 1) return false;
    
    return true;
  });
  
  return lines;
}

function searchInDatabase(query: string, limit: number): SearchResult[] {
  try {
    const database = getDatabase();
    const queryLower = query.toLowerCase().trim();
    
    console.log(`🔍 DB 검색: "${query}" (limit: ${limit})`);
    
    // FTS를 사용한 검색 (더 정확하고 빠름)
    const stmt = database.prepare(`
      SELECT s.media_file, s.text, s.start_time, s.end_time, s.language, s.directory,
             rank
      FROM subtitles_fts fts
      JOIN subtitles s ON s.id = fts.rowid
      WHERE fts.text MATCH ?
      ORDER BY rank
      LIMIT ?
    `);
    
    const results = stmt.all(query, limit);
    console.log(`📊 DB 검색 결과: ${results.length}개`);
    
    return results.map((row: any, index: number) => ({
      media_file: row.media_file,
      subtitle_text: row.text,
      start_time: row.start_time,
      end_time: row.end_time,
      language: row.language,
      directory: row.directory,
      confidence: Math.max(0.7, Math.min(1.0, 1.0 - (index * 0.05))) // 순위에 따른 신뢰도
    }));

  } catch (error) {
    console.error('DB 검색 오류:', error);
    
    // 폴백: LIKE 검색
    try {
      const database = getDatabase();
      const stmt = database.prepare(`
        SELECT media_file, text, start_time, end_time, language, directory
        FROM subtitles 
        WHERE text LIKE ? COLLATE NOCASE
        ORDER BY media_file, start_time
        LIMIT ?
      `);
      
      const results = stmt.all(`%${query}%`, limit);
      console.log(`📊 폴백 검색 결과: ${results.length}개`);
      
      return results.map((row: any, index: number) => ({
        media_file: row.media_file,
        subtitle_text: row.text,
        start_time: row.start_time,
        end_time: row.end_time,
        language: row.language,
        directory: row.directory,
        confidence: Math.max(0.6, Math.min(0.9, 0.9 - (index * 0.05)))
      }));
      
    } catch (fallbackError) {
      console.error('폴백 검색도 실패:', fallbackError);
      return [];
    }
  }
} 